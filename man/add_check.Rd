% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_check.R
\name{add_check}
\alias{add_check}
\title{Add a check to diffdf checks}
\usage{
add_check(check_fun, name, message, end = TRUE)
}
\arguments{
\item{check_fun}{A function which conducts the check. This function should
take arguments base, comp, keys and opts. It must return a list with 
elements:
\itemize{
\item{result: }{A logical which indicates if the test is passed}
\item{data: }{The data returned by the test, to be passed to the user}
\item{display_title: }{ The title to be displayed when the output of 
 this test is printed}
\item{display_body: }{The body to be displayed when the output of this test 
  is printed. Empty list if test passed}
\item{exclude_cols: }{Optional vector of columns to exclude from future 
 tests}
\item{exclude_rows: }{Optional named list of rows to exclude in base 
 and compare. Each element should be a vector with row numbers to exclude}
}}

\item{name}{A name for this test. This will be used to identify it in the 
list returned to the user}

\item{message}{The message for diffdf to display if the test fails}

\item{end}{A logical indicating whether this check should be done last or 
first. FALSE by default}
}
\value{
invisibly NULL: check is added to diffdf
}
\description{
Add a check to diffdf checks
}
\details{
diffdf runs a number of standard checks. This function allows you to
 add additional checks to it. The check can either be added at the start of 
 all checks or at the end. Note that checks at the end will be performed on a
 narrowed down version of the base/comparison datasets where all non 
 compatible columns have been removed.
}
\examples{
 # artificial example where I don't want base to have more than 10 rows!
 row_checker <- function(base, comp, keys, opts){
  pass <- TRUE
  data <- NULL
  body <- list()
  if(nrow(base)>10){
   pass <- FALSE
   data <- base[-(1:10),]
   body <- paste0(nrow(base) - 10, " additional rows")
  }
  list(
    result = pass,
    data = data,
    display_title = "Too many rows in Base!",
    display_body = body,
    exclude_rows = if(pass) NULL else list(base = seq(11, nrow(base)), 
     compare = NULL),
    exclude_cols = NULL 
  
  )
 }
 #test added to end
 add_check(row_checker, "rowlimit", "row limit met!")
 iris2 <- iris
 iris2$Sepal.Length[11] <- 44
 diffdf(iris, iris2)
 add_check(row_checker,"rowlimit2", "row limit met again!", end = FALSE)
 diffdf(iris, iris2)
 
 
}
